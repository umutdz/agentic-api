[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic-api"
version = "0.1.0"
description = "A FastAPI-based agentic API with content and code generation capabilities"
authors = [
    {name = "Agentic AI", email = "agentic.ai@gmail.com"}
]
readme = "docs/README.md"
license = {text = "MIT"}
requires-python = ">=3.10,<3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["fastapi", "ai", "agents", "llm", "api"]
dependencies = [
    "fastapi>=0.103.1",
    "fastapi-limiter==0.1.0",
    "uvicorn>=0.23.2",
    "sqlalchemy>=2.0.20",
    "alembic>=1.12.0",
    "pydantic>=2.3.0",
    "pydantic-settings>=2.0.3",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "aiohttp>=3.8.5",
    "tenacity>=8.2.3",
    "redis>=5.0.0",
    "aioredis>=2.0.1",
    "prometheus-client>=0.17.1",
    "sentry-sdk>=1.31.0",
    "celery>=5.3.4",
    "flower>=2.0.1",
    "requests>=2.31.0",
    "redis[hiredis]>=5.0.0",
    "orjson>=3.9.5",
    "asyncpg>=0.28.0",
    "psycopg2-binary>=2.9.7",
    "bcrypt>=4.0.1",
    "python-dotenv>=1.0.0",
    "elasticsearch==8.11.0",
    "elastic-apm==6.20.0",
    "fastapi-pagination==0.13.1",
    "pyjwt==2.10.0",
    "pymongo==4.13.0",
    "motor==3.7.1",
    "langchain-openai==0.3.32",
    "langchain-core==0.3.75",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.24.1",
    "ipython==8.12.3",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.24.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
]

[project.urls]
Homepage = "https://github.com/umutdz/agentic-api"
Documentation = "https://github.com/umutdz/agentic-api/docs"
Repository = "https://github.com/umutdz/agentic-api.git"
"Bug Tracker" = "https://github.com/umutdz/agentic-api/issues"

[project.scripts]
agentic-api = "app.main:main"
agentic-worker = "app.workers.worker:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "libs*"]
exclude = ["tests*", "scripts*", "docs*", "deployments*", "compose*"]

[tool.setuptools.package-data]
"app" = ["*.pyi", "py.typed"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "libs"]
known_third_party = ["fastapi", "uvicorn", "sqlalchemy", "alembic", "pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app", "libs"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
